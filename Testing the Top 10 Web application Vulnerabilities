--------------------------------------------------------------INTRODUCTION----------------------------------------------------
We are going to test the Top 10 Web Applications Vulnerabilities

Install juice shop

-------------------------------------------------The OWASP TOP 10 and OWASP TESTING CHECKLIST--------------------------
OWASP - open web application security project

*OWASP Cheat sheet
Ten 10 bugs:
injection.broken authentiaction,sensitive data exposures,XML External Entities,Broken access control,
Security Misconfiguration,XSS,Insecure Deserialization,using components with known vuln

know why is vulnerable and how to fix it.

*portswigger
Download
Owasp_testing_checklist
Owasp_testing_guide     

---------------------------------------------------Installing Owasp juice shop---------------------------------------

owasp juice shop - 
*Installing the docker in kali machine

https://airman604.medium.com/installing-docker-in-kali-linux-2017-1-fbaa4d1447fe

download and install juice shop

https://github.com/juice-shop/juice-shop

gitbooks - pwning OWASP juice shop (challenges and solutions)

------------------------------------------------Installing Froxy PROXY-------------------------------------------------------

find extension froxy proxy in the brower extensiom (already know to set)

----------------------------------------------------Explore Burpsuite-----------------------------------------------------

1.Unauthenticated testing
2.Admin user
3.Authenticated testing

*add to scope
*shows only scope
*Enagement tool
*active scanning
*rely on manual testing
*send to repeater - to repeat request
*Bappstore
*Encode & Decoder

------------------------------------------------------Introducing the score board-------------------------
localhost:3000/score-board directory

ideas about the vulnerabilities

------------------------------------------------------SQL injection attack overview------------------------------------

*SQL injection is an attack in which malicious sql statements are injected into a sql database
*SQL injection is easy to avoid , but still happens often
*if successful, we can read sensitive databases,extract information,modify databases and potentially even get a shell.

Common SQL verbs :
SELECT - Retrives data from a table
INSERT - Adds data to a table
DELETE - Removes data from a data
UPDATE - modifies data in a table
DROP   - Delete a table
UNION  - Combines Data from multiple queries

Where - filters records based on specific condition
and/or/not - filter records based on multiple conditions
order by - sorts records in ascending/descending order

' and " - string delimiters
--,/*, and # - comment delimiters
* and % - wildcards
; - Ends SQL statements
Plus a bunch of others that follow programmatic logic =,+,>,<.() etc


------------------------------------------SQL Injection Walkthrough-----------------------------------------------------

testing SQL injection in login page

in email field : test' OR 1=1; --

-------------------------------------------------SQL Injection Defenses---------------------------------------------------------------

1.Parameterized Statements
2.Sanitizing input

-------------------------------------------------Broken Authentication Overview and defenses--------------------------------------------

https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication

--------------------------------------------------Testing for broken authentication--------------------------------------------

*forgot password , security question - user enumeration

--------------------------------------------------Sensitive Data Exposure Overview----------------------------------------------

*passwords stored in clear text

https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure

*found backup file , got the whole website source code.

-------------------------------------------------Testing for sensitive data exposure--------------------------------------------------

*found /ftp directory leaking the backup file.

*nmap --script=ssl-enum-ciphers -p 443 tesla.com

-------------------------------------------------XML External Entities--------------------------------------------

XML External Entities - XXE

*Attacking systems that parse XML input
*Abuse SYSTEM entity and get malicious
*Attacks include denial of service,local file disclosure.RCE......

============================================
<?XML version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE   gift [
               <ENTITY from "Heath">
]>               
<gift>
     <To>Frank</To>
     <From>HEATH</From>
     <Item>Pokemon Cards</Items>
</gift>
 
 ============================================
 
 *xxe payloads in google
 
 ------------------------------------------------------XXE attack defense----------------------------------------------------
 only thought theory of the exploit.
 
 exploit not working in docker 
 
 ----------------------------------------------------Broken Access control------------------------------------------
 
 https://owasp.org/Top10/A01_2021-Broken_Access_Control/
 
 ----------------------------------------------------Broken access control walkthrough---------------------------------
 
 in feedback form , inspect element to see the user id.
 By changing the hidden into null
 
 ---------------------------------------------------Security Misconfiguration attacks Defenses-----------------------------------------
 https://owasp.org/Top10/A05_2021-Security_Misconfiguration/
 
 ---------------------------------------------------Cross-site-scripting------------------------------------------
 three types of XSS:
 *Reflected xss
 *Stored XSS
 *DOM xss
 
 https://owasp.org/www-community/attacks/xss/
 
 practice xss-game
 
 ------------------------------------------------Reflected Xss Walkthrough------------------------------------------
 
 payload : <iframe src="javascript:alert('xss')"> in search bar
 
 ------------------------------------------------Stored XSS walkthrough---------------------------------------
 
 stored xss in username
 
 --------------------------------------------------Preventing XSS-------------------------------------------
*Encoding < becomes &lt;
*filtering
*validating
*santization

--------------------------------------------------Insecure Deserialization------------------------------------------
Insecure deserialization is a vulnerability in which an untrusted or unknown data is used to either
inflict a denial of service attack (DoS attack), 
execute code, bypass authentication or further abuse the logic behind an application.

its hard to exploit.
 
 
     

